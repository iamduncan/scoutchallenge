datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image    UserImage?
  password Password?

  groups   Group[]
  sections Section[]

  answers           Answer[]
  notes             Note[]
  tokens            Token[]
  createdChallenges Challenge[]  @relation(name: "createdChallenges")
  updatedChallenges Challenge[]  @relation(name: "updatedChallenges")
  Session           Session[]
  roles             Role[]
  connection        Connection[]
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Group {
  id   String @id @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
  Section   Section[]
  Challenge Challenge[]
}

model Section {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  users User[]

  challenges Challenge[]
}

model Challenge {
  id           String          @id @default(cuid())
  name         String
  openDate     DateTime?
  closeDate    DateTime?
  introduction String?
  type         ChallengeType   @default(STANDARD)
  status       ChallengeStatus @default(DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation("createdChallenges", fields: [createdById], references: [id])
  createdById String
  updatedBy   User   @relation("updatedChallenges", fields: [updatedById], references: [id])
  updatedById String

  group    Group     @relation(fields: [groupId], references: [id])
  groupId  String
  sections Section[]

  challengeSections ChallengeSection[]
}

model ChallengeSection {
  id          String @id @default(cuid())
  title       String
  description String

  order Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  challengeId String

  questions Question[]
}

model Question {
  id          String       @id @default(cuid())
  title       String
  description String
  hint        String
  type        QuestionType
  data        Json?

  order Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  challengeSection   ChallengeSection @relation(fields: [challengeSectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  challengeSectionId String

  answers Answer[]
}

model Answer {
  id        String  @id @default(cuid())
  response  String
  isCorrect Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Token {
  id        String    @id @default(uuid())
  token     String    @unique @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onUpdate: NoAction)
  userId    String
  createdAt DateTime? @default(now())
  expiresAt DateTime?
}

enum RoleType {
  ADMIN
  GROUPADMIN
  SECTIONADMIN
  YOUNGPERSON
  PARENT
  USER
}

enum ChallengeType {
  STANDARD // Standard challenge
  LIVE // Live challenge (e.g. navigation challenge)
  TEAM // Team challenge
  CONTEST // Contest challenge (e.g. Pinewood Derby, etc)
}

enum ChallengeStatus {
  DRAFT
  PUBLISHED
  CLOSED
  DELETED
}

enum QuestionType {
  TEXT
  MULTIPLECHOICE
  TRUEFALSE
  FILLINTHEBLANK
  IMAGEUPLOAD
  VIDEOUPLOAD
  FILEUPLOAD
  CIPHER
}
